
mc1 master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007a  0080007a  00000612  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168f  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b22  00000000  00000000  00001e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c81  00000000  00000000  000029a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000526  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000967  00000000  00000000  00003dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 12 02 	call	0x424	; 0x424 <main>
  8a:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:
		case DIO_PORTC :
		PORTC = Vlaue ;
		break;
		
		case DIO_PORTD :
		PORTD = Vlaue ;
  92:	44 23       	and	r20, r20
  94:	b9 f1       	breq	.+110    	; 0x104 <DIO_SetPinDir+0x72>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SetPinDir+0xa>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <DIO_SetPinDir+0xe0>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	89 f0       	breq	.+34     	; 0xc2 <DIO_SetPinDir+0x30>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPinDir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_SetPinDir+0x46>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	11 f1       	breq	.+68     	; 0xee <DIO_SetPinDir+0x5c>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x22>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x3c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x38>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	21 b3       	in	r18, 0x11	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x64>
  fe:	82 2b       	or	r24, r18
 100:	81 bb       	out	0x11, r24	; 17
 102:	08 95       	ret
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x82>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDir+0xb2>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	29 f1       	breq	.+74     	; 0x15c <DIO_SetPinDir+0xca>
 112:	08 95       	ret
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x8a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0xa2>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0xba>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue(uint8 Port , uint8 Pin , uint8 Value)
{
	switch (Value)
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_SetPinValue+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_SetPinValue+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH :
		
		switch(Port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_SetPinValue+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPinValue+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_SetPinValue+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_SetPinValue+0x5c>
 18c:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPinValue+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPinValue+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
			break;
 1a2:	08 95       	ret
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinValue+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinValue+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
			break;
 1b8:	08 95       	ret
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinValue+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinValue+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21
			break;
 1ce:	08 95       	ret
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinValue+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinValue+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18
			break;
 1e4:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch(Port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_SetPinValue+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_SetPinValue+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_SetPinValue+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_SetPinValue+0xca>
 1f4:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinValue+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinValue+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27
			break;
 20c:	08 95       	ret
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinValue+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinValue+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	88 bb       	out	0x18, r24	; 24
			break;
 224:	08 95       	ret
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinValue+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinValue+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21
			break;
 23c:	08 95       	ret
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPinValue+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPinValue+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WriteCommand>:
void LCD_GoTo(uint8 Col, uint8 Row)
{
	uint8 arr[2] = {0x80 , 0xc0};
	
	LCD_WriteCommand(arr[Row]+Col);
}
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WriteCommand+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WriteCommand+0x42>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 2a4:	20 e1       	ldi	r18, 0x10	; 16
 2a6:	c2 9f       	mul	r28, r18
 2a8:	c0 01       	movw	r24, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	9b b3       	in	r25, 0x1b	; 27
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	89 2b       	or	r24, r25
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_WriteCommand+0x6c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_WriteCommand+0x72>
 2c8:	00 00       	nop
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 2d4:	8f e1       	ldi	r24, 0x1F	; 31
 2d6:	9e e4       	ldi	r25, 0x4E	; 78
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_WriteCommand+0x82>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_WriteCommand+0x88>
 2de:	00 00       	nop
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <LCD_Init>:
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	81 ee       	ldi	r24, 0xE1	; 225
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <LCD_Init+0x4c>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Init+0x56>
 33a:	00 00       	nop
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 342:	82 e3       	ldi	r24, 0x32	; 50
 344:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 348:	88 e2       	ldi	r24, 0x28	; 40
 34a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 34e:	8c e0       	ldi	r24, 0x0C	; 12
 350:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 366:	08 95       	ret

00000368 <LCD_WriteChar>:
 368:	cf 93       	push	r28
 36a:	c8 2f       	mov	r28, r24
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 38a:	8b b3       	in	r24, 0x1b	; 27
 38c:	9c 2f       	mov	r25, r28
 38e:	90 7f       	andi	r25, 0xF0	; 240
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	89 2b       	or	r24, r25
 394:	8b bb       	out	0x1b, r24	; 27
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	63 e0       	ldi	r22, 0x03	; 3
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 3a0:	8f e9       	ldi	r24, 0x9F	; 159
 3a2:	9f e0       	ldi	r25, 0x0F	; 15
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_WriteChar+0x3c>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_WriteChar+0x42>
 3aa:	00 00       	nop
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 3b6:	20 e1       	ldi	r18, 0x10	; 16
 3b8:	c2 9f       	mul	r28, r18
 3ba:	c0 01       	movw	r24, r0
 3bc:	11 24       	eor	r1, r1
 3be:	9b b3       	in	r25, 0x1b	; 27
 3c0:	9f 70       	andi	r25, 0x0F	; 15
 3c2:	89 2b       	or	r24, r25
 3c4:	8b bb       	out	0x1b, r24	; 27
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 3d0:	8f e9       	ldi	r24, 0x9F	; 159
 3d2:	9f e0       	ldi	r25, 0x0F	; 15
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_WriteChar+0x6c>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_WriteChar+0x72>
 3da:	00 00       	nop
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 3e6:	8f e1       	ldi	r24, 0x1F	; 31
 3e8:	9e e4       	ldi	r25, 0x4E	; 78
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_WriteChar+0x82>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_WriteChar+0x88>
 3f0:	00 00       	nop
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_WriteString>:
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	8c 01       	movw	r16, r24
 3fe:	c0 e0       	ldi	r28, 0x00	; 0
 400:	03 c0       	rjmp	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 402:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_WriteChar>
 406:	cf 5f       	subi	r28, 0xFF	; 255
 408:	f8 01       	movw	r30, r16
 40a:	ec 0f       	add	r30, r28
 40c:	f1 1d       	adc	r31, r1
 40e:	80 81       	ld	r24, Z
 410:	81 11       	cpse	r24, r1
 412:	f7 cf       	rjmp	.-18     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 422:	08 95       	ret

00000424 <main>:
#include "LCD.h"
#include "SPI.h"

int main(void)
{
	UART_Init();
 424:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Init>
	LCD_Init();
 428:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Init>
	
SPI_Master_Init();
 42c:	0e 94 28 02 	call	0x450	; 0x450 <SPI_Master_Init>

SPI_Master_InitTrans();
 430:	0e 94 41 02 	call	0x482	; 0x482 <SPI_Master_InitTrans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	83 ed       	ldi	r24, 0xD3	; 211
 438:	90 e3       	ldi	r25, 0x30	; 48
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <main+0x16>
 442:	00 c0       	rjmp	.+0      	; 0x444 <main+0x20>
 444:	00 00       	nop

_delay_ms(1000);
	
	while (1)
	{
		UART_SENDING();
 446:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <UART_SENDING>
		SPI_SENDING();
 44a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <SPI_SENDING>
 44e:	fb cf       	rjmp	.-10     	; 0x446 <main+0x22>

00000450 <SPI_Master_Init>:
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_LOW);
}

void  SPI_Master_EndTrans(void)
{
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	65 e0       	ldi	r22, 0x05	; 5
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	66 e0       	ldi	r22, 0x06	; 6
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 478:	83 e5       	ldi	r24, 0x53	; 83
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	9e b9       	out	0x0e, r25	; 14
 47e:	8d b9       	out	0x0d, r24	; 13
 480:	08 95       	ret

00000482 <SPI_Master_InitTrans>:
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	64 e0       	ldi	r22, 0x04	; 4
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinValue>
 48c:	08 95       	ret

0000048e <SPI_TranSiver>:
}

uint8 SPI_TranSiver(uint8 data)
{
	SPDR = data;
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 bb       	out	0x10, r25	; 16
 492:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT( SPSR , 7 ) == 0);
 494:	8e b1       	in	r24, 0x0e	; 14
 496:	9f b1       	in	r25, 0x0f	; 15
 498:	87 ff       	sbrs	r24, 7
 49a:	fc cf       	rjmp	.-8      	; 0x494 <SPI_TranSiver+0x6>
	
	return SPDR ;
 49c:	8f b1       	in	r24, 0x0f	; 15
 49e:	90 b3       	in	r25, 0x10	; 16
}
 4a0:	08 95       	ret

000004a2 <SPI_SENDING>:
uint8 rx_data = 0;


void SPI_SENDING(void){
	
	rx_data = SPI_TranSiver(tx_data);
 4a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a6:	0e 94 47 02 	call	0x48e	; 0x48e <SPI_TranSiver>
 4aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	
	if(rx_data == 2)
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <SPI_SENDING+0x14>
	{
		rx_data = 0;
 4b2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	83 ed       	ldi	r24, 0xD3	; 211
 4ba:	90 e3       	ldi	r25, 0x30	; 48
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <SPI_SENDING+0x1a>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <SPI_SENDING+0x24>
 4c6:	00 00       	nop
 4c8:	08 95       	ret

000004ca <UART_Init>:
	while(str[i] != '\0')
	{
		UART_Tx(str[i]);
		i++;
	}
}
 4ca:	81 b3       	in	r24, 0x11	; 17
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	81 bb       	out	0x11, r24	; 17
 4d0:	81 b3       	in	r24, 0x11	; 17
 4d2:	8e 7f       	andi	r24, 0xFE	; 254
 4d4:	81 bb       	out	0x11, r24	; 17
 4d6:	8a b1       	in	r24, 0x0a	; 10
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	8a b9       	out	0x0a, r24	; 10
 4dc:	8a b1       	in	r24, 0x0a	; 10
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	8a b9       	out	0x0a, r24	; 10
 4e2:	86 e8       	ldi	r24, 0x86	; 134
 4e4:	80 bd       	out	0x20, r24	; 32
 4e6:	87 e6       	ldi	r24, 0x67	; 103
 4e8:	89 b9       	out	0x09, r24	; 9
 4ea:	08 95       	ret

000004ec <UART_Rx>:

uint8 UART_Rx(void)
{
	/*if data received*/
	while(GET_BIT(UCSRA,7) == 0);
 4ec:	5f 9b       	sbis	0x0b, 7	; 11
 4ee:	fe cf       	rjmp	.-4      	; 0x4ec <UART_Rx>
	
	return UDR ;
 4f0:	8c b1       	in	r24, 0x0c	; 12
 4f2:	08 95       	ret

000004f4 <UART_SENDING>:
#include "LCD.h"
uint8 data =0;
void UART_SENDING(void){
	
	
	data= UART_Rx();
 4f4:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_Rx>
 4f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <data>
	if (data)
 4fc:	88 23       	and	r24, r24
 4fe:	21 f0       	breq	.+8      	; 0x508 <UART_SENDING+0x14>
	{
		LCD_WriteChar(data);
 500:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_WriteChar>
		data=0;
 504:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <data>
		
	}
	if(data==0){
 508:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <data>
 50c:	81 11       	cpse	r24, r1
 50e:	27 c0       	rjmp	.+78     	; 0x55e <UART_SENDING+0x6a>
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	83 ed       	ldi	r24, 0xD3	; 211
 514:	90 e3       	ldi	r25, 0x30	; 48
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <UART_SENDING+0x22>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <UART_SENDING+0x2c>
 520:	00 00       	nop
		_delay_ms(1000);
		LCD_WriteString(" UART IS ON ");
 522:	81 e6       	ldi	r24, 0x61	; 97
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_WriteString>
 52a:	2f ef       	ldi	r18, 0xFF	; 255
 52c:	8f e4       	ldi	r24, 0x4F	; 79
 52e:	93 ec       	ldi	r25, 0xC3	; 195
 530:	21 50       	subi	r18, 0x01	; 1
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	90 40       	sbci	r25, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <UART_SENDING+0x3c>
 538:	00 c0       	rjmp	.+0      	; 0x53a <UART_SENDING+0x46>
 53a:	00 00       	nop
		_delay_ms(4000);
		LCD_Clear();
 53c:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_Clear>
		LCD_WriteString(" START SPI ");
 540:	8e e6       	ldi	r24, 0x6E	; 110
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_WriteString>
 548:	2f ef       	ldi	r18, 0xFF	; 255
 54a:	8f e4       	ldi	r24, 0x4F	; 79
 54c:	93 ec       	ldi	r25, 0xC3	; 195
 54e:	21 50       	subi	r18, 0x01	; 1
 550:	80 40       	sbci	r24, 0x00	; 0
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <UART_SENDING+0x5a>
 556:	00 c0       	rjmp	.+0      	; 0x558 <UART_SENDING+0x64>
 558:	00 00       	nop
		_delay_ms(4000);
		LCD_Clear();
 55a:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_Clear>
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
